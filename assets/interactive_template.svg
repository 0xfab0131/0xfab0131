<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     version="1.1" baseProfile="full"
     viewBox="0 0 800 1500"
     preserveAspectRatio="xMidYMid meet"
     width="800" height="1500">

  <!-- 高度なフィルター定義 -->
  <defs>
    <!-- テキスト視認性向上のためのグロー効果 -->
    <filter id="textGlow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="2" result="blur"/>
      <feComposite in="SourceGraphic" in2="blur" operator="over"/>
    </filter>
    
    <!-- コンテンツ背景の明るさ調整フィルター -->
    <filter id="contentBrightness" x="-10%" y="-10%" width="120%" height="120%">
      <feComponentTransfer>
        <feFuncR type="linear" slope="1.2"/>
        <feFuncG type="linear" slope="1.2"/>
        <feFuncB type="linear" slope="1.2"/>
      </feComponentTransfer>
      <feGaussianBlur stdDeviation="5" result="blur"/>
      <feComposite in="SourceGraphic" in2="blur" operator="over"/>
    </filter>
    
    <!-- 3D深度マップフィルター -->
    <filter id="depthMap" x="-50%" y="-50%" width="200%" height="200%">
      <feTurbulence type="fractalNoise" baseFrequency="0.01" numOctaves="3" seed="2" result="noise"/>
      <feDisplacementMap in="SourceGraphic" in2="noise" scale="20" xChannelSelector="R" yChannelSelector="G"/>
    </filter>
    
    <!-- ホログラフィック効果フィルター -->
    <filter id="holographic" x="-50%" y="-50%" width="200%" height="200%">
      <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" seed="3" result="turbulence"/>
      <feDisplacementMap in="SourceGraphic" in2="turbulence" scale="10" xChannelSelector="R" yChannelSelector="G"/>
      <feColorMatrix type="hueRotate" values="0">
        <animate attributeName="values" from="0" to="360" dur="10s" repeatCount="indefinite"/>
      </feColorMatrix>
      <feGaussianBlur stdDeviation="1"/>
      <feComposite in="SourceGraphic" operator="arithmetic" k1="0.5" k2="0.5" k3="0.5" k4="0"/>
    </filter>
    
    <!-- 光の屈折と透明効果 -->
    <filter id="lightRefraction" x="-50%" y="-50%" width="200%" height="200%">
      <feTurbulence type="fractalNoise" baseFrequency="0.03" numOctaves="5" seed="5" result="turbulence"/>
      <feDisplacementMap in="SourceGraphic" in2="turbulence" scale="15" xChannelSelector="R" yChannelSelector="G"/>
      <feColorMatrix type="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 0.7 0" result="colored"/>
      <feBlend in="SourceGraphic" in2="colored" mode="screen"/>
    </filter>
    
    <!-- 3D深度グラデーション -->
    <linearGradient id="depthGradient1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#020617" stop-opacity="1"/>
      <stop offset="20%" stop-color="#0f172a" stop-opacity="0.9"/>
      <stop offset="40%" stop-color="#1e3a8a" stop-opacity="0.8"/>
      <stop offset="60%" stop-color="#1e40af" stop-opacity="0.7"/>
      <stop offset="80%" stop-color="#3b82f6" stop-opacity="0.6"/>
      <stop offset="100%" stop-color="#60a5fa" stop-opacity="0.5"/>
    </linearGradient>
    
    <linearGradient id="depthGradient2" x1="100%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" stop-color="#0c0a3e" stop-opacity="1"/>
      <stop offset="25%" stop-color="#2e1065" stop-opacity="0.9"/>
      <stop offset="50%" stop-color="#4c1d95" stop-opacity="0.8"/>
      <stop offset="75%" stop-color="#7e22ce" stop-opacity="0.7"/>
      <stop offset="100%" stop-color="#a855f7" stop-opacity="0.6"/>
    </linearGradient>
    
    <linearGradient id="depthGradient3" x1="50%" y1="0%" x2="50%" y2="100%">
      <stop offset="0%" stop-color="#0f0f30" stop-opacity="1"/>
      <stop offset="30%" stop-color="#1a1a4a" stop-opacity="0.9"/>
      <stop offset="60%" stop-color="#312e81" stop-opacity="0.8"/>
      <stop offset="100%" stop-color="#4338ca" stop-opacity="0.7"/>
    </linearGradient>
    
    <!-- コンテンツ背景用グラデーション -->
    <linearGradient id="contentBgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#000428" stop-opacity="0.85"/>
      <stop offset="100%" stop-color="#004e92" stop-opacity="0.85"/>
    </linearGradient>
    
    <!-- バッジ背景用グラデーション -->
    <linearGradient id="badgeBgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f172a" stop-opacity="0.9"/>
      <stop offset="100%" stop-color="#1e3a8a" stop-opacity="0.9"/>
    </linearGradient>
    
    <!-- クリスタル効果用パターン -->
    <pattern id="crystalPattern" patternUnits="userSpaceOnUse" width="200" height="200" patternTransform="scale(0.5) rotate(30)">
      <path d="M0,50 L50,0 L100,50 L50,100 Z" fill="none" stroke="rgba(255,255,255,0.2)" stroke-width="1"/>
      <path d="M100,50 L150,0 L200,50 L150,100 Z" fill="none" stroke="rgba(255,255,255,0.2)" stroke-width="1"/>
      <path d="M50,100 L100,50 L150,100 L100,150 Z" fill="none" stroke="rgba(255,255,255,0.2)" stroke-width="1"/>
      <path d="M-50,50 L0,0 L50,50 L0,100 Z" fill="none" stroke="rgba(255,255,255,0.2)" stroke-width="1"/>
      <path d="M50,0 L100,-50 L150,0 L100,50 Z" fill="none" stroke="rgba(255,255,255,0.2)" stroke-width="1"/>
    </pattern>
    
    <!-- 3Dグリッド用パターン -->
    <pattern id="gridPattern" patternUnits="userSpaceOnUse" width="100" height="100" patternTransform="scale(0.5)">
      <rect width="100" height="100" fill="none" stroke="rgba(100,149,237,0.1)" stroke-width="0.5"/>
      <line x1="25" y1="0" x2="25" y2="100" stroke="rgba(100,149,237,0.05)" stroke-width="0.5"/>
      <line x1="50" y1="0" x2="50" y2="100" stroke="rgba(100,149,237,0.05)" stroke-width="0.5"/>
      <line x1="75" y1="0" x2="75" y2="100" stroke="rgba(100,149,237,0.05)" stroke-width="0.5"/>
      <line x1="0" y1="25" x2="100" y2="25" stroke="rgba(100,149,237,0.05)" stroke-width="0.5"/>
      <line x1="0" y1="50" x2="100" y2="50" stroke="rgba(100,149,237,0.05)" stroke-width="0.5"/>
      <line x1="0" y1="75" x2="100" y2="75" stroke="rgba(100,149,237,0.05)" stroke-width="0.5"/>
    </pattern>
    
    <!-- 光線効果 -->
    <radialGradient id="lightRay" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
      <stop offset="0%" stop-color="rgba(255,255,255,0.3)"/>
      <stop offset="100%" stop-color="rgba(255,255,255,0)"/>
    </radialGradient>
    
    <!-- 動的なマスク用のフィルター -->
    <filter id="dynamicMask" x="-50%" y="-50%" width="200%" height="200%">
      <feTurbulence type="fractalNoise" baseFrequency="0.01" numOctaves="3" seed="10" result="noise">
        <animate attributeName="baseFrequency" from="0.01" to="0.02" dur="30s" repeatCount="indefinite" />
      </feTurbulence>
      <feColorMatrix type="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" result="coloredNoise"/>
      <feComposite in="SourceGraphic" in2="coloredNoise" operator="in"/>
    </filter>
  </defs>

  <style type="text/css"><![CDATA[
    /* ベースのスタイル定義 */
    body {
      margin: 0;
      padding: 16px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI',
                   Roboto, Oxygen, Ubuntu, Cantarell,
                   'Open Sans', 'Helvetica Neue', sans-serif;
      color: #fff;
      background: transparent;
      position: relative;
      z-index: 10;
    }
    
    h1, h2, h3 { 
      margin: 20px 0 12px 0; 
      position: relative;
      z-index: 10;
      text-shadow: 0 0 10px rgba(0,0,0,0.8);
    }
    
    h2 {
      padding-bottom: 8px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.3);
      margin-top: 30px;
      position: relative;
    }
    
    h2::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 2px;
      background: linear-gradient(90deg, rgba(59, 130, 246, 0.7), rgba(139, 92, 246, 0.7));
      transform: scaleX(0);
      transform-origin: left;
      animation: borderSlide 2s ease-out forwards;
    }
    
    @keyframes borderSlide {
      to { transform: scaleX(1); }
    }
    
    ul { 
      margin: 0 0 24px 20px; 
      padding: 0; 
      position: relative;
      z-index: 10;
    }
    
    li {
      margin-bottom: 8px;
      position: relative;
      z-index: 10;
      text-shadow: 0 0 8px rgba(0,0,0,0.7);
    }
    
    p { 
      margin: 12px 0 24px 0; 
      position: relative;
      z-index: 10;
      text-shadow: 0 0 8px rgba(0,0,0,0.7);
    }
    
    img { 
      max-width: 100%; 
      height: auto; 
      vertical-align: middle; 
      position: relative;
      z-index: 10;
      filter: drop-shadow(0 4px 6px rgba(0,0,0,0.5));
      transition: transform 0.3s ease, filter 0.3s ease;
    }
    
    img:hover {
      transform: translateY(-2px) scale(1.05);
      filter: drop-shadow(0 8px 12px rgba(0,0,0,0.7));
    }
    
    a { 
      color: inherit; 
      text-decoration: none; 
      position: relative;
      z-index: 10;
    }
    
    .center { 
      text-align: center; 
      position: relative;
      z-index: 10;
    }
    
    .flex-center { 
      display: flex; 
      align-items: center; 
      justify-content: center;
      flex-wrap: wrap;
      gap: 12px;
      margin-bottom: 24px;
      position: relative;
      z-index: 10;
    }
    
    .badge-row { 
      margin: 16px 0 24px 0;
      position: relative;
      z-index: 10;
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      justify-content: flex-start;
    }
    
    .badge-row img { 
      margin: 4px; 
      transition: transform 0.3s ease, filter 0.3s ease;
      filter: drop-shadow(0 2px 4px rgba(0,0,0,0.5));
      z-index: 10;
    }
    
    .badge-row img:hover {
      transform: translateY(-3px) scale(1.1);
      filter: drop-shadow(0 4px 8px rgba(0,0,0,0.7)) brightness(1.1);
    }
    
    .stats-card {
      height: 170px !important;
      width: auto;
      position: relative;
      z-index: 10;
      transition: transform 0.3s ease, filter 0.3s ease;
    }
    
    .stats-card:hover {
      transform: translateY(-5px) scale(1.02);
      filter: drop-shadow(0 8px 16px rgba(0,0,0,0.8));
    }
    
    .stats-section {
      margin-bottom: 30px;
      position: relative;
      z-index: 10;
    }
    
    /* コンテンツ背景効果 */
    .content-section {
      position: relative;
      margin-bottom: 30px;
      padding: 20px;
      border-radius: 10px;
      background: url(#contentBgGradient);
      box-shadow: 0 10px 30px rgba(0,0,0,0.3);
      overflow: hidden;
      z-index: 5;
      backdrop-filter: blur(5px);
      -webkit-backdrop-filter: blur(5px);
      transform-style: preserve-3d;
      transform: perspective(1000px) translateZ(0px);
      transition: transform 0.5s ease;
    }
    
    .content-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url(#crystalPattern);
      opacity: 0.1;
      z-index: -1;
      transform: translateZ(-10px);
    }
    
    .content-section::after {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      right: -50%;
      bottom: -50%;
      background: radial-gradient(circle at center, rgba(59, 130, 246, 0.2), transparent 70%);
      opacity: 0.5;
      z-index: -2;
      transform: translateZ(-20px);
      animation: pulseGlow 8s infinite alternate ease-in-out;
    }
    
    @keyframes pulseGlow {
      0% { opacity: 0.3; transform: translateZ(-20px) scale(0.8); }
      100% { opacity: 0.6; transform: translateZ(-20px) scale(1.2); }
    }
    
    .badge-container {
      position: relative;
      background: url(#badgeBgGradient);
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 20px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
      transform-style: preserve-3d;
      transform: perspective(1000px) translateZ(0px);
      z-index: 5;
    }
    
    .badge-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border-radius: 8px;
      background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0));
      z-index: -1;
    }
    
    /* 3Dアニメーション効果 */
    @keyframes floatY {
      0%, 100% { transform: translateY(0) translateZ(0); }
      50% { transform: translateY(-15px) translateZ(50px); }
    }
    
    @keyframes floatX {
      0%, 100% { transform: translateX(0) translateZ(0); }
      50% { transform: translateX(15px) translateZ(30px); }
    }
    
    @keyframes rotateSlowly {
      0% { transform: rotate(0deg) translateZ(0); }
      100% { transform: rotate(360deg) translateZ(0); }
    }
    
    @keyframes breathe {
      0%, 100% { transform: scale(1) translateZ(0); }
      50% { transform: scale(1.05) translateZ(20px); }
    }
    
    @keyframes depthPulse {
      0%, 100% { transform: translateZ(0); }
      50% { transform: translateZ(50px); }
    }
    
    @keyframes colorCycle {
      0% { filter: hue-rotate(0deg); }
      100% { filter: hue-rotate(360deg); }
    }
    
    @keyframes opacityPulse {
      0%, 100% { opacity: 0.2; }
      50% { opacity: 0.5; }
    }
    
    /* 3D層の基本スタイル */
    .depth-layer {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }
    
    /* 3D空間の定義 */
    .space-3d {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      perspective: 1000px;
      overflow: hidden;
      z-index: 1;
    }
    
    .space-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      transform-style: preserve-3d;
      transform: translateZ(0);
    }
    
    /* 星空効果 */
    .star {
      position: absolute;
      background: #fff;
      border-radius: 50%;
      transform-style: preserve-3d;
    }
    
    /* 3Dグリッド */
    .grid-3d {
      position: absolute;
      width: 200%;
      height: 200%;
      top: -50%;
      left: -50%;
      background: url(#gridPattern);
      transform-style: preserve-3d;
      transform: rotateX(60deg) translateZ(-200px);
      opacity: 0.3;
      animation: gridMove 30s linear infinite;
    }
    
    @keyframes gridMove {
      0% { transform: rotateX(60deg) translateZ(-200px) translateY(0); }
      100% { transform: rotateX(60deg) translateZ(-200px) translateY(100%); }
    }
    
    /* 光の柱 */
    .light-pillar {
      position: absolute;
      width: 2px;
      background: linear-gradient(to bottom, rgba(100,149,237,0), rgba(100,149,237,0.7), rgba(100,149,237,0));
      transform-style: preserve-3d;
      animation: pillarFloat 15s ease-in-out infinite;
    }
    
    @keyframes pillarFloat {
      0%, 100% { transform: translateY(0) translateX(0) translateZ(0); }
      25% { transform: translateY(-50px) translateX(20px) translateZ(100px); }
      50% { transform: translateY(-100px) translateX(0) translateZ(200px); }
      75% { transform: translateY(-50px) translateX(-20px) translateZ(100px); }
    }
    
    /* 3D雲効果 */
    .cloud-3d {
      position: absolute;
      border-radius: 50%;
      background: radial-gradient(circle, rgba(255,255,255,0.1), rgba(255,255,255,0));
      transform-style: preserve-3d;
      animation: cloudFloat 20s ease-in-out infinite;
    }
    
    @keyframes cloudFloat {
      0%, 100% { transform: translateZ(50px) scale(1); opacity: 0.3; }
      50% { transform: translateZ(150px) scale(1.2); opacity: 0.5; }
    }
    
    /* ホログラム効果 */
    .hologram {
      position: absolute;
      width: 100%;
      height: 100%;
      background: url(#crystalPattern);
      opacity: 0.1;
      transform-style: preserve-3d;
      animation: hologramShift 15s linear infinite;
    }
    
    @keyframes hologramShift {
      0% { transform: translateZ(0) rotate(0deg); opacity: 0.05; }
      25% { transform: translateZ(50px) rotate(5deg); opacity: 0.1; }
      50% { transform: translateZ(100px) rotate(0deg); opacity: 0.15; }
      75% { transform: translateZ(50px) rotate(-5deg); opacity: 0.1; }
      100% { transform: translateZ(0) rotate(0deg); opacity: 0.05; }
    }
    
    /* 光線効果 */
    .light-ray {
      position: absolute;
      width: 300px;
      height: 300px;
      border-radius: 50%;
      background: url(#lightRay);
      transform-style: preserve-3d;
      animation: rayRotate 30s linear infinite;
      opacity: 0.3;
      mix-blend-mode: screen;
    }
    
    @keyframes rayRotate {
      0% { transform: rotate(0deg) translateZ(0) scale(1); }
      50% { transform: rotate(180deg) translateZ(100px) scale(1.5); }
      100% { transform: rotate(360deg) translateZ(0) scale(1); }
    }
    
    /* パーティクル効果 */
    .particle {
      position: absolute;
      width: 4px;
      height: 4px;
      background: #fff;
      border-radius: 50%;
      transform-style: preserve-3d;
      animation: particleFloat 20s ease-in-out infinite;
    }
    
    @keyframes particleFloat {
      0%, 100% { transform: translateX(0) translateY(0) translateZ(0); opacity: 0.3; }
      25% { transform: translateX(var(--tx1)) translateY(var(--ty1)) translateZ(var(--tz1)); opacity: 0.7; }
      50% { transform: translateX(var(--tx2)) translateY(var(--ty2)) translateZ(var(--tz2)); opacity: 1; }
      75% { transform: translateX(var(--tx3)) translateY(var(--ty3)) translateZ(var(--tz3)); opacity: 0.7; }
    }
    
    /* 深度感のあるグラデーション背景 */
    .depth-gradient {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #020617, #1e3a8a, #1e40af);
      transform-style: preserve-3d;
      animation: gradientShift 20s ease-in-out infinite;
    }
    
    @keyframes gradientShift {
      0%, 100% { transform: translateZ(-300px); }
      50% { transform: translateZ(-350px); }
    }
    
    /* 透明な結晶構造 */
    .crystal-structure {
      position: absolute;
      width: 100%;
      height: 100%;
      background: url(#crystalPattern);
      opacity: 0.1;
      transform-style: preserve-3d;
      animation: crystalRotate 60s linear infinite;
    }
    
    @keyframes crystalRotate {
      0% { transform: translateZ(-200px) rotate(0deg); }
      100% { transform: translateZ(-200px) rotate(360deg); }
    }
    
    /* コンテンツホバー効果 */
    .content-section:hover {
      transform: perspective(1000px) translateZ(10px) scale(1.01);
      box-shadow: 0 15px 40px rgba(0,0,0,0.4);
    }
    
    /* 背景のぼかし効果（コンテンツの視認性向上） */
    .content-backdrop {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      backdrop-filter: blur(5px);
      -webkit-backdrop-filter: blur(5px);
      z-index: 2;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .content-section:hover + .content-backdrop {
      opacity: 1;
    }
    
    /* テキストの視認性向上のためのグロー効果 */
    .text-glow {
      text-shadow: 0 0 10px rgba(255,255,255,0.5);
      position: relative;
      z-index: 10;
    }
  ]]></style>

  <!-- 背景の基本レイヤー -->
  <rect width="100%" height="100%" fill="#020617"/>
  
  <!-- 3D空間コンテナ -->
  <g class="space-3d">
    <g class="space-container" id="spaceContainer">
      <!-- 深度感のあるグラデーション背景 -->
      <rect class="depth-gradient" width="100%" height="100%" fill="url(#depthGradient1)"/>
      
      <!-- 3Dグリッド -->
      <rect class="grid-3d" width="100%" height="100%" fill="url(#gridPattern)"/>
      
      <!-- 透明な結晶構造 -->
      <rect class="crystal-structure" width="100%" height="100%" fill="url(#crystalPattern)"/>
      
      <!-- ホログラム効果 -->
      <rect class="hologram" width="100%" height="100%" fill="url(#crystalPattern)" filter="url(#holographic)"/>
      
      <!-- 動的な光の柱 -->
      <rect class="light-pillar" x="100" y="0" width="2" height="1500" fill="rgba(100,149,237,0.3)" style="--delay: 0s;"/>
      <rect class="light-pillar" x="300" y="0" width="2" height="1500" fill="rgba(100,149,237,0.3)" style="--delay: 2s;"/>
      <rect class="light-pillar" x="500" y="0" width="2" height="1500" fill="rgba(100,149,237,0.3)" style="--delay: 4s;"/>
      <rect class="light-pillar" x="700" y="0" width="2" height="1500" fill="rgba(100,149,237,0.3)" style="--delay: 6s;"/>
      
      <!-- 3D雲効果 -->
      <circle class="cloud-3d" cx="200" cy="300" r="150" fill="url(#lightRay)"/>
      <circle class="cloud-3d" cx="600" cy="800" r="200" fill="url(#lightRay)"/>
      <circle class="cloud-3d" cx="400" cy="1200" r="180" fill="url(#lightRay)"/>
      
      <!-- 光線効果 -->
      <circle class="light-ray" cx="150" cy="400" r="150" fill="url(#lightRay)"/>
      <circle class="light-ray" cx="650" cy="700" r="200" fill="url(#lightRay)"/>
      <circle class="light-ray" cx="350" cy="1100" r="180" fill="url(#lightRay)"/>
      
      <!-- パーティクル効果 -->
      <circle class="particle" cx="100" cy="200" r="2" fill="#fff" style="--tx1: 50px; --ty1: -30px; --tz1: 100px; --tx2: 100px; --ty2: -60px; --tz2: 200px; --tx3: 50px; --ty3: -90px; --tz3: 100px;"/>
      <circle class="particle" cx="300" cy="400" r="2" fill="#fff" style="--tx1: -70px; --ty1: 40px; --tz1: 150px; --tx2: -140px; --ty2: 80px; --tz2: 300px; --tx3: -70px; --ty3: 120px; --tz3: 150px;"/>
      <circle class="particle" cx="500" cy="600" r="2" fill="#fff" style="--tx1: 60px; --ty1: 50px; --tz1: 120px; --tx2: 120px; --ty2: 100px; --tz2: 240px; --tx3: 60px; --ty3: 150px; --tz3: 120px;"/>
      <circle class="particle" cx="700" cy="800" r="2" fill="#fff" style="--tx1: -40px; --ty1: -60px; --tz1: 80px; --tx2: -80px; --ty2: -120px; --tz2: 160px; --tx3: -40px; --ty3: -180px; --tz3: 80px;"/>
      <circle class="particle" cx="200" cy="1000" r="2" fill="#fff" style="--tx1: 30px; --ty1: -40px; --tz1: 90px; --tx2: 60px; --ty2: -80px; --tz2: 180px; --tx3: 30px; --ty3: -120px; --tz3: 90px;"/>
      <circle class="particle" cx="400" cy="1200" r="2" fill="#fff" style="--tx1: -50px; --ty1: 30px; --tz1: 110px; --tx2: -100px; --ty2: 60px; --tz2: 220px; --tx3: -50px; --ty3: 90px; --tz3: 110px;"/>
      <circle class="particle" cx="600" cy="1400" r="2" fill="#fff" style="--tx1: 45px; --ty1: 35px; --tz1: 130px; --tx2: 90px; --ty2: 70px; --tz2: 260px; --tx3: 45px; --ty3: 105px; --tz3: 130px;"/>
      
      <!-- 星空効果 -->
      <g id="starsContainer"></g>
    </g>
  </g>

  <!-- 高度なJavaScriptアニメーション -->
  <script type="text/javascript"><![CDATA[
    (function() {
      // requestAnimationFrameのポリフィル
      const requestAnimFrame = window.requestAnimationFrame || 
                              window.webkitRequestAnimationFrame || 
                              window.mozRequestAnimationFrame || 
                              function(callback) { window.setTimeout(callback, 1000/60); };
      
      // デバイスのパフォーマンスに基づいて効果の複雑さを調整する
      let performanceLevel = 'high'; // 'low', 'medium', 'high'
      
      // パフォーマンスチェック
      function checkPerformance() {
        const start = performance.now();
        let count = 0;
        
        // 簡単な計算を繰り返し実行
        for (let i = 0; i < 1000000; i++) {
          count += i;
        }
        
        const end = performance.now();
        const duration = end - start;
        
        // 実行時間に基づいてパフォーマンスレベルを設定
        if (duration > 100) {
          performanceLevel = 'low';
        } else if (duration > 50) {
          performanceLevel = 'medium';
        } else {
          performanceLevel = 'high';
        }
        
        console.log(`Performance level: ${performanceLevel} (benchmark: ${duration.toFixed(2)}ms)`);
        return performanceLevel;
      }
      
      // 星を生成する関数
      function createStars() {
        const starsContainer = document.getElementById('starsContainer');
        const starCount = performanceLevel === 'high' ? 200 : 
                         performanceLevel === 'medium' ? 100 : 50;
        
        for (let i = 0; i < starCount; i++) {
          const star = document.createElementNS("http://www.w3.org/2000/svg", "circle");
          const size = Math.random() * 2 + 1;
          const x = Math.random() * 800;
          const y = Math.random() * 1500;
          const z = Math.random() * 500 - 250;
          
          star.setAttribute("class", "star");
          star.setAttribute("cx", x);
          star.setAttribute("cy", y);
          star.setAttribute("r", size);
          star.setAttribute("fill", `rgba(255, 255, 255, ${Math.random() * 0.5 + 0.5})`);
          
          // 3D位置を設定
          star.style.transform = `translateZ(${z}px)`;
          
          // 点滅アニメーション
          const animationDuration = Math.random() * 3 + 2;
          const animationDelay = Math.random() * 5;
          star.style.animation = `opacityPulse ${animationDuration}s ease-in-out ${animationDelay}s infinite`;
          
          starsContainer.appendChild(star);
        }
      }
      
      // 3D視差効果を追加
      function addParallaxEffect() {
        const spaceContainer = document.getElementById('spaceContainer');
        let mouseX = 0, mouseY = 0;
        let targetX = 0, targetY = 0;
        
        // マウス移動イベントリスナー
        document.addEventListener('mousemove', (e) => {
          // ビューポート内のマウス位置を-1から1の範囲に正規化
          mouseX = (e.clientX / window.innerWidth) * 2 - 1;
          mouseY = (e.clientY / window.innerHeight) * 2 - 1;
        });
        
        // デバイスの傾きイベントリスナー（モバイル用）
        window.addEventListener('deviceorientation', (e) => {
          if (e.beta && e.gamma) {
            // デバイスの傾きを-1から1の範囲に正規化
            mouseX = (e.gamma / 45) * 1;
            mouseY = (e.beta / 45) * 1;
          }
        });
        
        // アニメーションループ
        function updateParallax() {
          // 目標値にゆっくり近づける（イージング）
          targetX += (mouseX - targetX) * 0.05;
          targetY += (mouseY - targetY) * 0.05;
          
          // 3D空間を回転
          spaceContainer.style.transform = `rotateY(${targetX * 10}deg) rotateX(${-targetY * 10}deg)`;
          
          // コンテンツセクションにも微妙な3D効果を適用
          const contentSections = document.querySelectorAll('.content-section');
          contentSections.forEach((section) => {
            section.style.transform = `perspective(1000px) translateZ(0px) rotateY(${targetX * 3}deg) rotateX(${-targetY * 3}deg)`;
          });
          
          requestAnimFrame(updateParallax);
        }
        
        updateParallax();
      }
      
      // WebGLを使用した高度な3D効果（パフォーマンスが高い場合のみ）
      function initWebGL() {
        if (performanceLevel !== 'high') return;
        
        // キャンバス作成
        const canvas = document.createElement('canvas');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        canvas.style.position = 'absolute';
        canvas.style.top = '0';
        canvas.style.left = '0';
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        canvas.style.pointerEvents = 'none';
        canvas.style.zIndex = '1';
        canvas.style.opacity = '0.7';
        canvas.style.mixBlendMode = 'screen';
        
        // SVGの最初の子要素として挿入
        const svg = document.querySelector('svg');
        svg.parentNode.insertBefore(canvas, svg);
        
        // WebGL初期化
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        if (!gl) return;
        
        // シェーダーソース
        const vertexShaderSource = `
          attribute vec2 a_position;
          varying vec2 v_texCoord;
          
          void main() {
            gl_Position = vec4(a_position, 0, 1);
            v_texCoord = a_position * 0.5 + 0.5;
          }
        `;
        
        const fragmentShaderSource = `
          precision mediump float;
          varying vec2 v_texCoord;
          uniform float u_time;
          
          // 3Dノイズ関数
          vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
          vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
          vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }
          vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
          
          float snoise(vec3 v) {
            const vec2 C = vec2(1.0/6.0, 1.0/3.0);
            const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
            
            // 格子の頂点を計算
            vec3 i  = floor(v + dot(v, C.yyy));
            vec3 x0 = v - i + dot(i, C.xxx);
            
            // その他の頂点を計算
            vec3 g = step(x0.yzx, x0.xyz);
            vec3 l = 1.0 - g;
            vec3 i1 = min(g.xyz, l.zxy);
            vec3 i2 = max(g.xyz, l.zxy);
            
            vec3 x1 = x0 - i1 + C.xxx;
            vec3 x2 = x0 - i2 + C.yyy;
            vec3 x3 = x0 - D.yyy;
            
            // 格子の頂点に乱数値を割り当て
            i = mod289(i);
            vec4 p = permute(permute(permute(
                     i.z + vec4(0.0, i1.z, i2.z, 1.0))
                   + i.y + vec4(0.0, i1.y, i2.y, 1.0))
                   + i.x + vec4(0.0, i1.x, i2.x, 1.0));
                   
            // 勾配ノイズの計算
            float n_ = 0.142857142857;
            vec3 ns = n_ * D.wyz - D.xzx;
            
            vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
            
            vec4 x_ = floor(j * ns.z);
            vec4 y_ = floor(j - 7.0 * x_);
            
            vec4 x = x_ *ns.x + ns.yyyy;
            vec4 y = y_ *ns.x + ns.yyyy;
            vec4 h = 1.0 - abs(x) - abs(y);
            
            vec4 b0 = vec4(x.xy, y.xy);
            vec4 b1 = vec4(x.zw, y.zw);
            
            vec4 s0 = floor(b0)*2.0 + 1.0;
            vec4 s1 = floor(b1)*2.0 + 1.0;
            vec4 sh = -step(h, vec4(0.0));
            
            vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;
            vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;
            
            vec3 p0 = vec3(a0.xy, h.x);
            vec3 p1 = vec3(a0.zw, h.y);
            vec3 p2 = vec3(a1.xy, h.z);
            vec3 p3 = vec3(a1.zw, h.w);
            
            // 勾配の正規化
            vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));
            p0 *= norm.x;
            p1 *= norm.y;
            p2 *= norm.z;
            p3 *= norm.w;
            
            // 勾配ノイズの混合
            vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
            m = m * m;
            return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));
          }
          
          void main() {
            // 時間に基づいて変化するノイズ
            float n = snoise(vec3(v_texCoord * 5.0, u_time * 0.1)) * 0.5 + 0.5;
            
            // 深度効果のための色の計算
            vec3 color1 = vec3(0.05, 0.1, 0.2); // 深い青
            vec3 color2 = vec3(0.1, 0.2, 0.5);  // 中間の青
            vec3 color3 = vec3(0.2, 0.4, 0.8);  // 明るい青
            
            // ノイズに基づいて色を混合
            vec3 color = mix(color1, color2, n);
            color = mix(color, color3, pow(n, 3.0));
            
            // 光の効果を追加
            float light = pow(n, 5.0) * 2.0;
            color += vec3(light);
            
            // 中心からの距離に基づくビネット効果
            vec2 center = vec2(0.5, 0.5);
            float dist = distance(v_texCoord, center);
            float vignette = smoothstep(0.5, 0.2, dist);
            
            // 最終的な色
            gl_FragColor = vec4(color * vignette, n * 0.7);
          }
        `;
        
        // シェーダーのコンパイル
        function compileShader(gl, source, type) {
          const shader = gl.createShader(type);
          gl.shaderSource(shader, source);
          gl.compileShader(shader);
          
          if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.error('シェーダーのコンパイルに失敗しました:', gl.getShaderInfoLog(shader));
            gl.deleteShader(shader);
            return null;
          }
          
          return shader;
        }
        
        // シェーダープログラムの作成
        const vertexShader = compileShader(gl, vertexShaderSource, gl.VERTEX_SHADER);
        const fragmentShader = compileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);
        
        const program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          console.error('プログラムのリンクに失敗しました:', gl.getProgramInfoLog(program));
          return;
        }
        
        // 頂点データ
        const positionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
        
        const positions = [
          -1.0, -1.0,
           1.0, -1.0,
          -1.0,  1.0,
           1.0,  1.0
        ];
        
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
        
        // 属性とユニフォームの取得
        const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');
        const timeUniformLocation = gl.getUniformLocation(program, 'u_time');
        
        // 描画関数
        function render() {
          // キャンバスのサイズをウィンドウに合わせる
          if (canvas.width !== window.innerWidth || canvas.height !== window.innerHeight) {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            gl.viewport(0, 0, canvas.width, canvas.height);
          }
          
          // クリア
          gl.clearColor(0, 0, 0, 0);
          gl.clear(gl.COLOR_BUFFER_BIT);
          
          // プログラムの使用
          gl.useProgram(program);
          
          // 頂点属性の設定
          gl.enableVertexAttribArray(positionAttributeLocation);
          gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
          gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);
          
          // 時間ユニフォームの更新
          gl.uniform1f(timeUniformLocation, performance.now() / 1000);
          
          // 描画
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          
          // 次のフレームを要求
          requestAnimFrame(render);
        }
        
        // レンダリング開始
        render();
      }
      
      // コンテンツセクションの3D効果を強化
      function enhance3DContentSections() {
        // コンテンツセクションを3Dコンテナで包む
        const sections = document.querySelectorAll('h2, ul, p, .badge-row, .flex-center, .stats-section');
        
        sections.forEach((section, index) => {
          // 元の要素を保存
          const parent = section.parentNode;
          const nextSibling = section.nextSibling;
          
          // 3Dコンテナを作成
          const container = document.createElement('div');
          container.className = 'content-section';
          container.style.animationDelay = `${index * 0.1}s`;
          
          // 要素を3Dコンテナに移動
          parent.removeChild(section);
          container.appendChild(section);
          
          // 3Dコンテナを元の位置に挿入
          if (nextSibling) {
            parent.insertBefore(container, nextSibling);
          } else {
            parent.appendChild(container);
          }
          
          // 背景のぼかし効果用の要素を追加
          const backdrop = document.createElement('div');
          backdrop.className = 'content-backdrop';
          parent.insertBefore(backdrop, container.nextSibling);
        });
        
        // バッジコンテナを作成
        const badgeRows = document.querySelectorAll('.badge-row');
        badgeRows.forEach((row) => {
          const parent = row.parentNode;
          const container = document.createElement('div');
          container.className = 'badge-container';
          
          // バッジ行をコンテナに移動
          parent.insertBefore(container, row);
          container.appendChild(row);
        });
      }
      
      // マウス位置に基づく動的な光の効果
      function addDynamicLightEffect() {
        const svg = document.querySelector('svg');
        const lightEffect = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        
        lightEffect.setAttribute("cx", "0");
        lightEffect.setAttribute("cy", "0");
        lightEffect.setAttribute("r", "300");
        lightEffect.setAttribute("fill", "url(#lightRay)");
        lightEffect.style.opacity = "0.2";
        lightEffect.style.mixBlendMode = "screen";
        lightEffect.style.filter = "blur(20px)";
        lightEffect.style.pointerEvents = "none";
        
        svg.appendChild(lightEffect);
        
        // マウス移動イベントリスナー
        document.addEventListener('mousemove', (e) => {
          // SVG内の座標に変換
          const rect = svg.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          
          // 光の位置を更新
          lightEffect.setAttribute("cx", x);
          lightEffect.setAttribute("cy", y);
        });
      }
      
      // 初期化関数
      function init() {
        // パフォーマンスチェック
        checkPerformance();
        
        // 星を生成
        createStars();
        
        // 3D視差効果を追加
        addParallaxEffect();
        
        // コンテンツセクションの3D効果を強化
        enhance3DContentSections();
        
        // マウス位置に基づく動的な光の効果
        addDynamicLightEffect();
        
        // WebGL効果を初期化（パフォーマンスが高い場合のみ）
        initWebGL();
      }
      
      // DOMContentLoadedイベントで初期化
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
      } else {
        init();
      }
    })();
  ]]></script>

  <foreignObject x="0" y="0" width="800" height="1500">
    <body xmlns="http://www.w3.org/1999/xhtml">
      <!-- ウェルカム見出し -->
      <h1 class="flex-center text-glow">
        <img id="welcome-gif" width="28" height="28" alt="Welcome GIF" src="{{WELCOME_GIF_URL}}"/>
        <span style="margin-left:8px;">Welcome to my profile!</span>
      </h1>

      <!-- About Me -->
      <h2 class="text-glow">👨‍💻 About Me</h2>
      <ul>
        <li>🧑‍💻 Full Stack Engineer with a passion for creating user-friendly applications</li>
        <li>🚀 Currently focusing on cloud-native architecture and microservices</li>
        <li>🔭 Working on building innovative services and solutions</li>
        <li>🌱 Learning more about AI/ML integration in web applications</li>
        <li>💡 Interested in open source contribution and community projects</li>
      </ul>

      <!-- Skills and Technologies -->
      <h2 class="text-glow">🛠️ Skills and Technologies</h2>

      <h3>Frontend</h3>
      <p class="badge-row">
        <img id="react-img" alt="React" src="{{REACT_URL}}"/>
        <img id="nextjs-img" alt="Next.js" src="{{NEXTJS_URL}}"/>
        <img id="typescript-img" alt="TypeScript" src="{{TYPESCRIPT_URL}}"/>
        <img id="javascript-img" alt="JavaScript" src="{{JAVASCRIPT_URL}}"/>
        <img id="threejs-img" alt="Three.js" src="{{THREEJS_URL}}"/>
        <img id="tailwind-img" alt="Tailwind CSS" src="{{TAILWIND_URL}}"/>
        <img id="materialui-img" alt="Material UI" src="{{MATERIALUI_URL}}"/>
        <img id="astro-img" alt="Astro" src="{{ASTRO_URL}}"/>
      </p>

      <h3>Backend and Infrastructure</h3>
      <p class="badge-row">
        <img id="nodejs-img" alt="Node.js" src="{{NODEJS_URL}}"/>
        <img id="go-img" alt="Go" src="{{GO_URL}}"/>
        <img id="python-img" alt="Python" src="{{PYTHON_URL}}"/>
        <img id="csharp-img" alt="C#" src="{{CSHARP_URL}}"/>
        <img id="dotnet-img" alt=".NET" src="{{DOTNET_URL}}"/>
        <img id="docker-img" alt="Docker" src="{{DOCKER_URL}}"/>
        <img id="kubernetes-img" alt="Kubernetes" src="{{KUBERNETES_URL}}"/>
        <img id="graphql-img" alt="GraphQL" src="{{GRAPHQL_URL}}"/>
        <img id="postgresql-img" alt="PostgreSQL" src="{{POSTGRESQL_URL}}"/>
      </p>

      <!-- Cloud and DevOps -->
      <h3>Cloud and DevOps</h3>
      <p class="badge-row">
        <img id="aws-img" alt="AWS" src="{{AWS_URL}}"/>
        <img id="azure-img" alt="Azure" src="{{AZURE_URL}}"/>
        <img id="gcp-img" alt="GCP" src="{{GCP_URL}}"/>
        <img id="github-actions-img" alt="GitHub Actions" src="{{GITHUB_ACTIONS_URL}}"/>
        <img id="vercel-img" alt="Vercel" src="{{VERCEL_URL}}"/>
        <img id="firebase-img" alt="Firebase" src="{{FIREBASE_URL}}"/>
        <img id="supabase-img" alt="Supabase" src="{{SUPABASE_URL}}"/>
        <img id="cloudflare-img" alt="Cloudflare" src="{{CLOUDFLARE_URL}}"/>
      </p>

      <!-- Featured Projects -->
      <h2 class="text-glow">📂 Featured Projects</h2>
      <p>Coming soon…</p>

      <!-- GitHub Stats -->
      <h2 class="text-glow">📊 GitHub Stats</h2>
      <div class="center flex-center stats-section">
        <img id="github-stats-img" alt="GitHub Stats" class="stats-card" src="{{GITHUB_STATS_URL}}"/>
        <img id="top-langs-img" alt="Top Languages" class="stats-card" src="{{TOP_LANGUAGES_URL}}"/>
      </div>
      <div class="center stats-section">
        <img id="streak-stats-img" alt="GitHub Streak Stats" src="{{STREAK_STATS_URL}}"/>
      </div>

      <!-- Connect with Me -->
      <h2 class="text-glow">📫 Connect with Me</h2>
      <div class="center">
        <a href="https://twitter.com/fab_for_fab">
          <img id="twitter-img" alt="Twitter" src="{{TWITTER_URL}}"/>
        </a>
        <a href="https://github.com/0xfab0131">
          <img id="github-img" alt="GitHub" src="{{GITHUB_URL}}"/>
        </a>
      </div>
    </body>
  </foreignObject>
</svg>